module Main where

import qualified DA.Set as S

import Test.LAcreation 
import Daml.Script
import DA.Date
import Platform.Types.LA 
import Platform.LeaseAgreement.Service
import Platform.LeaseAgreement.ModelMI

initialize : Script (Party, Party,Party)
initialize = do

  (parties, contracts, house, _) <- laCreation
  let 
      laKey = LAkey with tenant = parties.bob; house 


  -- Bob creates MI  Should be bob or host inviting arbitrators
  miReportCid <- submit parties.bob do 
    exerciseCmd contracts.laServiceCid CreateMI with reporter=parties.bob; house; startingDate = date 2024 May 19; description = "Broken chair"


  arbitrator2 <- allocateParty "arbitrator2"
  aliceId <- validateUserId "alice"
  bobId <- validateUserId "bob"
  operatorId <- validateUserId "operator"
  timeProviderId <- validateUserId "timeProvider"
  arbitrator1Id <- validateUserId "Arbitrator1" --genearl arbitrarator party too

  createUser (User aliceId (Some parties.alice)) [CanActAs parties.alice]
  createUser (User bobId (Some parties.bob)) [CanActAs parties.bob]
  createUser (User operatorId (Some parties.operator)) [CanActAs parties.operator]
  createUser (User timeProviderId (Some parties.timeProvider)) [CanActAs parties.timeProvider]
  createUser (User arbitrator1Id (Some parties.arbitrator1)) [CanActAs parties.arbitrator1]
  
  

  invitationCid <- submit parties.bob do 
    exerciseCmd contracts.laServiceCid InvokeArbitrators with inviter=parties.bob; invited = S.fromList [parties.arbitrator1, arbitrator2]; miReportCid


  invitationCid <- submit arbitrator2 do 
    exerciseCmd invitationCid Accept with arbitrator=arbitrator2

{--  passTime (T.days 1)

  clockCid<- submit parties.timeProvider do
    exerciseCmd contracts.clockCid Advance with days=1

  passTime (T.days 1)

  clockCid <- submit parties.timeProvider do
    exerciseCmd clockCid Advance with days=1
 
  passTime (T.days 1) -- how is time passed on the ledger

  clockCid <- submit parties.timeProvider do
    exerciseCmd clockCid Advance with days=1--}

  pure (parties.timeProvider, parties.arbitrator1, parties.operator)

