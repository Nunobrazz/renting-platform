module Platform.Proposal where

import Platform.Types.LA
import Platform.Types.Common
import Platform.ModelLA
import Time.Lifecycle.Evolve
import DA.List as L


template Proposal 
  with
    tenant : Party
    house : House
    leaseTerms : LeaseTerms 
    operator : Party
  where
    signatory tenant 
    observer house.host
    ensure house.host /= tenant

    choice Accept : ContractId LACreationRequest 
                            -- operator cannot be here because the tenant cannot confirm that the operator party is valid
      controller house.host
        do
          create LACreationRequest with operator; tenant; house; leaseTerms

    choice Decline : ()
      with 
      controller house.host
        do
          return()

    choice Withdraw : ()
      with 
      controller tenant
        do
          return()


template LACreationRequest
  with
    operator : Party
    tenant : Party
    house : House
    leaseTerms : LeaseTerms
  where
    signatory tenant, house.host
    observer operator

    choice Reject : ()
      controller operator      -- operator rejects
      do pure ()

    choice Approve : ContractId LeaseAgreement -- could do a service without automatic payments.
      with 
        evolveId : Text
        laId : Int
      controller operator      -- operator approves
      do
        let laKey=LAkey with tenant, house,id=laId
        (_, Evolve{lifecycler}) <- fetchByKey (operator, evolveId)

        exerciseByKey @Evolve (operator, evolveId) AddLA with laKey -- necessary operator
        -- sort payment dates
        let sortedleaseTerms = LeaseTerms with agreedRent=leaseTerms.agreedRent; beginingDate=leaseTerms.beginingDate; paymentDates= L.sort leaseTerms.paymentDates; nArbitrators=leaseTerms.nArbitrators
        create LeaseAgreement with operator; lifecycler; tenant;laKey; house; leaseTerms; paymentsToProcess=leaseTerms.paymentDates




