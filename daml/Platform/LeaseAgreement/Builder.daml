module Platform.LeaseAgreement.Builder where


import DA.List
import Interface.Types as Types (House, LeaseTerms, LAkey(..)) 





{-- Never changes except by the operator
template Builder
  with 
    operator : Party
    poKeys : [POkey]
  where 
    signatory operator
    key operator : Party
    maintainer key

    -- find a way of having a template with operator and alice and bob and a choice to build and the controller is the operator
    -- maybe pass the chosen payment oracle as argument of the chocie
    nonconsuming choice Build : ()
      with 
        tenant: Party
        house : House
        leaseTerms : LeaseTerms
      controller operator
      do 
        assertMsg ("No Payment Oracles available.") (null poKeys)
        
        let po = head poKeys 
            laKey = LAkey with tenant, house
        
        laCid <- create Model.LeaseAgreement with operator; tenant; house; paymentsOracle=po.oracle; leaseTerms; completedPayments = []


        exerciseByKey @Payments.Oracle po Payments.AddLA with laKey

        pure()

        
    choice AddPO : ContractId Builder 
      with
        poKey : POkey
      controller operator
      do
        create this with poKeys = poKey :: poKeys 

--}