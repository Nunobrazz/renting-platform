module Platform.LeaseAgreement.Service where

import qualified DA.Set as S
import Types.Common
import Platform.Types.Common 
import Platform.Types.LA 
import Platform.Types.MI 
import Platform.LeaseAgreement.ModelLA 
import Platform.LeaseAgreement.ModelMI


template Service
  with
    operator : Party
    host : Party       -- Who will put the house for listing (must be host)
    tenant : Party     -- Who is renting the house
    arbitrator : Party
    laKey : LAkey
  where
    signatory operator, host, tenant    -- Market operator and user will need to sign this contract
    
    key (host, tenant) : (Party, Party)  
    maintainer key._1, key._2
  


---- BEGIN ---- MAINTENANCE ISSUES
  
    nonconsuming choice CreateMI : ContractId MIReport
      with 
        reporter : Party
        house : House
        description : Text
        startingDate : Date -- put today date
      controller reporter
      do

        assertMsg ("Creating the MI the reporter is neither tenant nor host.") (reporter == tenant || reporter == host)

        -- Get number of arbitrators
        (_, LeaseAgreement{leaseTerms, house}) <- fetchByKey @LeaseAgreement laKey 

        let miDetails = MIdetails with nArbitrators = leaseTerms.nArbitrators; house; startingDate; description

        create MIReport with tenant; host; miDetails; arbitrators = S.empty



    nonconsuming choice SubmitAssessment : ContractId Assessment
      with 
        creator : Party
        signer : Party
        assessment : AssessmentDetails
        miReportCid : ContractId MIReport
      controller creator
      do
        MIReport{miDetails} <- fetch miReportCid
        create Assessment with creator; signer; miDetails; assessment
    

    nonconsuming choice AcceptAssessment : ContractId MIresultFriendly
      with 
        signer : Party 
        assessmentCid : ContractId Assessment
      controller signer
      do
        exercise assessmentCid SignAssessment with signer


    nonconsuming choice InvokeArbitrators : ContractId InviteArbitrators -- Como fazer que os reportes nÃ£o convidem estranhos ?  Meter o operator a criar um contract com todos os arbitrators disponiveis ?
      with
        inviter : Party 
        invited : Parties
        miReportCid : ContractId MIReport
      controller inviter
      do
        MIReport{miDetails} <- fetch miReportCid
        create InviteArbitrators with inviter; invited; confirmed = S.empty; miDetails; miReportCid

    

---- END ---- MAINTENANCE ISSUES

template Request
  with
    operator : Party
    proposer : Party
    house : House
    leaseTerms : LeaseTerms
  where
    signatory proposer, house.host
    observer operator

    choice Withdraw : ()
      controller proposer      -- proposer can Withdraw
      do pure ()

    choice Reject : ()
      controller operator      -- operator rejects
      do pure ()

    choice Approve : ContractId Service
      with 
        lifecycler : Party
        arbitrator : Party
      controller operator      -- operator approves
      do

        create LeaseAgreement with operator; lifecycler; tenant=proposer; house; leaseTerms;paymentsToProcess=leaseTerms.paymentDates
        create Service with operator; tenant=proposer; host=house.host; arbitrator; laKey = LAkey with tenant=proposer;house










