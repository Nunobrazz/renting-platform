module Platform.LeaseAgreement.ArbitratorsService where

import qualified DA.Set as S
import Platform.Types.MI 
import Platform.LeaseAgreement.ModelMI qualified as MImodel (MI(..), Votation(..), Vote(..), FinalizeVotation(..))


template Service
  with
    operator : Party     
    arbitrator : Party
  where
    signatory operator     
    observer arbitrator
    

 

---- BEGIN ---- ARBITRATORS VOTATION
    nonconsuming choice CreateVotation : ContractId MImodel.Votation
      with 
        description : Text
        miCid : ContractId MImodel.MI     
        assessment : AssessmentDetails
      controller arbitrator
      do
        MImodel.MI{arbitrators, miDetails} <- fetch miCid -- This fetch may be dispensible 
        let 
          responsability = (Responsability with 
                              reporterResp=(assessment.responsability.reporterResp/miDetails.nArbitrators), 
                                counterpartResp=assessment.responsability.counterpartResp/miDetails.nArbitrators) 

          result = AssessmentDetails with responsability, cost=assessment.cost, assessmentDate=assessment.assessmentDate, reparationDate=assessment.reparationDate 
        
        create MImodel.Votation with creator=arbitrator; description; voters=arbitrators; miCid; alreadyVoted = S.fromList [arbitrator]; result


    nonconsuming choice SubmitVote : ContractId MImodel.Votation
      with 
        vote : Responsability
        votationCid : ContractId MImodel.Votation
      controller arbitrator
      do
        exercise votationCid MImodel.Vote with voter = arbitrator; vote


    nonconsuming choice FinalizeVotation : ContractId MImodel.MI
      with 
        votationCid : ContractId MImodel.Votation
      controller arbitrator
      do
        exercise votationCid MImodel.FinalizeVotation with finalizer= arbitrator

    
---- END ---- ARBITRATORS VOTATION








template Offer
  with
    operator : Party
    arbitrator : Party
  where
    signatory operator
    observer arbitrator

    choice Accept : ContractId Service
      controller arbitrator
      do
        create Service with operator; arbitrator

    choice Decline : ()
      controller arbitrator
      do
        return ()



template Request
  with
    arbitrator : Party
    operator : Party
  where
    signatory arbitrator
    observer operator

    choice Approve : ContractId Service
      controller operator
      do
        create Service with operator; arbitrator

    choice Reject : ()
      controller operator
      do
        return ()