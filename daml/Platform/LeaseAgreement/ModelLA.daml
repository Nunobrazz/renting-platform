module Platform.LeaseAgreement.ModelLA where


import DA.List
import DA.Foldable (forA_)
import Interface.Types as Types (House, LeaseTerms, LAkey(..)) 
import Time.Lifecycle.Iou

-- https://docs.daml.com/daml-finance/packages/implementations/daml-finance-instrument-bond.html
-- https://docs.daml.com/triggers/index.html

template LeaseAgreement
  with
    operator: Party
    lifecycler : Party
    tenant : Party         
    house : House 
    leaseTerms : LeaseTerms
    paymentsToProcess : [Date] 
  where
    signatory operator, tenant, house.host   
    observer lifecycler
    ensure not (leaseTerms.paymentDates /= [] && leaseTerms.beginingDate >= head leaseTerms.paymentDates)
    
    key LAkey with tenant, house : (LAkey)
    maintainer key.tenant, key.house.host


    nonconsuming choice ProcessPayment : ContractId LeaseAgreement
      with 
        date : Date
      controller lifecycler
      do

        let payments = filter ( <= date) paymentsToProcess 
            newPaymentsToProcess = filter ( > date) paymentsToProcess 
        if (not (null payments)) then 
          do
            forA_ payments (\payment ->
              do
                create Iou with creator=lifecycler; debtor=tenant; owner=house.host, amount=leaseTerms.rent
              )
            archive self
            create LeaseAgreement with operator;lifecycler;tenant;house;leaseTerms; paymentsToProcess = newPaymentsToProcess

        else do 
          pure self

