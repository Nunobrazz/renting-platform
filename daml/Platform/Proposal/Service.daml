module Platform.Proposal.Service where
{--
import Platform.Types.Common as Types (House, LeaseTerms) 
import Platform.Proposal.Model qualified as Model (Sign(..), Proposal(..), RequestLeaseAgreement(..))
import Platform.LeaseAgreement.Service qualified as LAService 
import Time.Lifecycle.Evolve



template Service -- proposal service deveira ser para qualquer host
  with
    operator : Party
    proposer : Party
    host : Party
  where
    signatory operator, proposer
    observer host

    key (operator, proposer) : (Party, Party)  
    maintainer key._1


    nonconsuming choice CreateProposal: ContractId Model.Proposal
      with
        proposer : Party
        house : House
        leaseTerms : LeaseTerms
      controller proposer
      do
        create Model.Proposal with proposer; house; leaseTerms; alreadySigned=[]

    -- Archives a Proposal contract by the host (not possible to to here host is not signatory of proposalCid)
    nonconsuming choice RejectProposal : ()
      with 
        proposalCid : ContractId Model.Proposal
      controller host
      do 
        archive proposalCid

    -- Archives a Proposal contract by the proposer
    nonconsuming choice DeleteProposal : ()
      with
        proposalCid : ContractId Model.Proposal
      controller proposer
      do
        archive proposalCid

    -- Creates a new instance of Proposal with the host's signature and archives the listing contract of this house
    nonconsuming choice AcceptProposal : ContractId Model.Proposal
      with 
        proposalCid : ContractId Model.Proposal
      controller host
      do 
        exercise proposalCid Model.Sign with signer=host

    -- In case we need to add a new signer
    nonconsuming choice SignProposal : ContractId Model.Proposal
      with 
        signer : Party
        proposalCid : ContractId Model.Proposal
      controller proposer
      do 
        exercise proposalCid Model.Sign with signer

    nonconsuming choice RequestLeaseAgreement : ContractId LAService.Request
      with 
        signer : Party
        proposalCid : ContractId Model.Proposal
      controller signer
      do 
        exercise proposalCid Model.RequestLeaseAgreement with signer; operator
        


-- This tmeplate will be created by the proposer to request to make a proposal to a house
template Request
  with
    operator : Party
    proposer : Party
    house : House
  where
    signatory proposer
    observer operator, house.host

    choice Withdraw : ()
      controller proposer      -- proposer can Withdraw
      do pure ()

    choice Reject : ()
      controller operator      -- operator rejects
      do pure ()

    choice Approve : ContractId Service
      controller operator      -- operator approves
      do
        create Service with operator; proposer; host=house.host



--}