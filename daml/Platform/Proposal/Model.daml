module Platform.Proposal.Model where

import DA.List
import Platform.Types.Common as Types (House, LeaseTerms) 
import Platform.LeaseAgreement.Service as LAService

template Proposal
  with
    proposer : Party
    house : House
    leaseTerms : LeaseTerms
    alreadySigned : [Party] -- Specify function CreateProposal to be called by the proposer to initliaze alreadySinged to []
    -- signed: Bool not used because is less secure
  where
    signatory proposer, alreadySigned
    observer house.host

    ensure unique alreadySigned

    -- Should be only Proposer signing because host signis when he accepts the proposal
    -- Coded like this for the case we want to add a new signer
    choice Sign : ContractId Proposal 
      with
        signer : Party
      controller signer
        do
          -- Check the controller is in the toSign list, and if they are, sign the Pending contract
          assert (signer `elem` toSign this)
          create this with alreadySigned = signer :: alreadySigned   


    choice RequestLeaseAgreement : ContractId LAService.Request
      with
        signer : Party 
        operator : Party
      controller signer
        do
          -- Check that all the required signatories have signed Pending
          assertMsg "Not every Party Signed the proposal" (sort alreadySigned == sort [proposer, house.host]) 
          create LAService.Request with operator; proposer; house; leaseTerms

       
-- | The parties who need to sign are the finalContract signatories with alreadySigned filtered out
toSign : Proposal -> [Party]
toSign Proposal {alreadySigned, proposer, house} = filter (`notElem` alreadySigned) [proposer, house.host]







