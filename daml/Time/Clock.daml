module Time.Clock where 


import DA.Date (addDays, toDateUTC)
import Types.Common (Parties)

-- host should do lifecycle






-- | Event signalling the update of a `DateClock`. 
template DateClockUpdateEvent
  with
    provider : Party
      -- ^ Provider of the event.
    eventDate : Date
      -- ^ The event time.
    --id : Id
      -- ^ Event identifier.
    observers : Parties
      -- ^ The clock's observers.
  where
    signatory provider
    observer observers  
    key (provider, eventDate) : (Party, Date)
    maintainer key._1


-- | Used to keep track of the current date.
template DateClock
  with
    provider : Party
      -- ^ The clock's provider.
    clockDate : Date
      -- ^ The clock's date.
    -- id : Id
      -- ^ The clock's identifier if we use different timezones 
    description : Text
      -- ^ The clock's description.
    observers : Parties
      -- ^ Observers.
  where
    signatory provider
    observer observers


    nonconsuming choice Advance : ContractId DateClock
        -- ^ Advance time to its next state.
        with
          --eventId : Id
            -- ^ Event identifier.
          days : Int
            -- ^ Days to advance
        controller provider
        do
          now <- getTime
          let today = toDateUTC now
          assertMsg "Provided time doesnt match with ledger time" ((addDays clockDate days) == today)
          moveClock this self days


-- | HIDE
moveClock : DateClock -> ContractId DateClock -> Int -> Update (ContractId DateClock)

moveClock this@DateClock {clockDate; provider; observers} self offset = do -- verificar se tempo esta certo
  let
    newDate = addDays clockDate offset
    clock = this with clockDate=newDate

  -- atomic
  exerciseByKey @DateClockUpdateEvent (provider, clockDate) Archive     -- archive old event
  archive self                                                          -- archive clock
  clockCid <- create clock                                              -- create clock
  _ <- create DateClockUpdateEvent with                                      -- create event
    provider
    observers
    eventDate = clock.clockDate
  -- atomic

  pure clockCid


