module Test.Roles where

import qualified DA.Set as S
import Daml.Script
import DA.Date
import Platform.Types.Common 
import Platform.Role.Operator qualified as Operator (Role(..))
import Time.Clock
import Time.Lifecycle.Evolve


data Parties = Parties
  with
    alice: Party
    bob: Party
    operator: Party
    admin: Party
    timeProvider1: Party
    timeProvider2: Party
    timeProvider3: Party
    lifecycler: Party
    arbitrator1: Party
    arbitrator2: Party
    public : Party

data Contracts = Contracts
  with
    operatorRoleCid : ContractId Operator.Role


init : Script (Parties, Contracts, House, LeaseTerms)
init = script do 

    alice <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")              
    operator <- allocatePartyWithHint "Operator" (PartyIdHint "Operator")              
    bob <- allocatePartyWithHint "Bob" (PartyIdHint "Bob")                       
    admin <- allocatePartyWithHint "Admin" (PartyIdHint "Admin")                 
  
    timeProvider1 <- allocatePartyWithHint "TimeProvider1" (PartyIdHint "TimeProvider1")  
    timeProvider2 <- allocatePartyWithHint "TimeProvider2" (PartyIdHint "TimeProvider2")  
    timeProvider3 <- allocatePartyWithHint "TimeProvider3" (PartyIdHint "TimeProvider3")     
    lifecycler <- allocatePartyWithHint "Lifecycler" (PartyIdHint "Lifecycler")     

    arbitrator1 <- allocatePartyWithHint "Arbitrator1" (PartyIdHint "Arbitrator1")     
    arbitrator2 <- allocatePartyWithHint "Arbitrator2" (PartyIdHint "Arbitrator2")     
    
    public <- allocatePartyWithHint "Public" (PartyIdHint "Public")    

    now <- getTime
    let house = House with host=alice; address = "Telheiras"; details = "This is a nice house"; listedRent=100 -- bug
        leaseTerms = LeaseTerms with agreedRent=100; beginingDate = date 2024 Jan 2; paymentDates=[date 2024 Jan 3, date 2024 Feb 1, date 2024 Mar 1]; nArbitrators = 2
        parties = Parties with alice; bob; operator; admin; timeProvider1;timeProvider2;lifecycler; timeProvider3; arbitrator1; arbitrator2; public
        today = toDateUTC now

    operatorRoleCid <- submit operator do
      createCmd Operator.Role with operator
    
    dateClockCid <- submit operator do
      createCmd DateClock with operator; providers=[]; clockDate=toDateUTC now; public= parties.public; waitingAccept=S.fromList [timeProvider1, timeProvider2]
  
    dateClockCid <- submit timeProvider1 do
      exerciseCmd dateClockCid Accept with newProvider = timeProvider1

    dateClockCid <- submit timeProvider2 do
      exerciseCmd dateClockCid Accept with newProvider = timeProvider2

    evolveCid <- submit operator do
      createCmd Evolve with operator; lifecycler; laKeys = S.empty

    dateClockCid <- submit timeProvider2 do
      exerciseCmd dateClockCid Advance with advancer = timeProvider2

    let contracts = Contracts with operatorRoleCid
    return (parties, contracts, house, leaseTerms)

