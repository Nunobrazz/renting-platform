module Test.Roles where

import qualified DA.Set as S
import qualified DA.List as L
import Daml.Script
import DA.Date
import Platform.Types.Common 
import Time.Clock
import Time.Lifecycle.Evolve

data Parties = Parties
  with
    alice: Party
    bob: Party
    operator: Party
    admin: Party
    timeProvider1: Party
    timeProvider2: Party
    timeProvider3: Party
    lifecycler: Party
    arbitrator1: Party
    arbitrator2: Party
    arbitrator3: Party
    public : Party


init : Script (Parties, House, LeaseTerms, Date)
init = script do 

    alice <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")              
    operator <- allocatePartyWithHint "Operator" (PartyIdHint "Operator")              
    bob <- allocatePartyWithHint "Bob" (PartyIdHint "Bob")                       
    admin <- allocatePartyWithHint "Admin" (PartyIdHint "Admin")                 
  
    timeProvider1 <- allocatePartyWithHint "TimeProvider1" (PartyIdHint "TimeProvider1")  
    timeProvider2 <- allocatePartyWithHint "TimeProvider2" (PartyIdHint "TimeProvider2")  
    timeProvider3 <- allocatePartyWithHint "TimeProvider3" (PartyIdHint "TimeProvider3")     
    lifecycler <- allocatePartyWithHint "Lifecycler" (PartyIdHint "Lifecycler")     

    arbitrator1 <- allocatePartyWithHint "Arbitrator1" (PartyIdHint "Arbitrator1")     
    arbitrator2 <- allocatePartyWithHint "Arbitrator2" (PartyIdHint "Arbitrator2")     
    arbitrator3 <- allocatePartyWithHint "Arbitrator3" (PartyIdHint "Arbitrator3")     
    
    public <- allocatePartyWithHint "Public" (PartyIdHint "Public")    

    let house = House with host=alice; address = "Palermo Soho"; details = "This is a nice house"; listedRent=100 -- bug in listed house
        leaseTerms = LeaseTerms with agreedRent=100; beginingDate = date 2024 Jan 2; paymentDates=[date 2024 Jun 24, date 2024 Jul 1, date 2024 Aug 1]; nArbitrators = 2
        parties = Parties with alice; bob; operator; admin; timeProvider1; timeProvider2; lifecycler; timeProvider3; arbitrator1; arbitrator2; arbitrator3; public
        today = date 2024 Jun 21

    -- Begin Ledger Initialization 
    
    evolveCid <- submit operator do
      createCmd Evolve with operator; lifecycler; laKeys = S.empty; id="1"
    
    dateClockUpdateEventCid <- submit operator do
      createCmd DateClockUpdateEvent with creator=operator; eventDate=today; observers=S.fromList [parties.public, timeProvider1, timeProvider2, parties.lifecycler]; operator; providers=[operator]
    dateClockCid <- submit operator do
      createCmd DateClock with operator; providers=[]; clockDate=today; creator=operator; waitingAccept = S.fromList [timeProvider1, timeProvider2]
    dateClockCid <- submit timeProvider1 do
      exerciseCmd dateClockCid Accept with provider = timeProvider1
    dateClockCid <- submit timeProvider2 do
      exerciseCmd dateClockCid Accept with provider = timeProvider2

    submit timeProvider1 do
      exerciseCmd dateClockCid Advance with advancer=timeProvider1

    -- End Ledger Initialization 
    dateClockQ <- query @DateClock timeProvider2
    let (dateClockCid, _) = L.head dateClockQ
    submit timeProvider2 do
      exerciseCmd dateClockCid Advance with advancer=timeProvider2

    dateClockQ <- query @DateClock timeProvider2

    let (dateClockCid, _) = L.head dateClockQ
    submit timeProvider2 do
      exerciseCmd dateClockCid Advance with advancer=timeProvider2

    return (parties, house, leaseTerms, today)

