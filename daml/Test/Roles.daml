module Test.Roles where

import qualified DA.Set as S
import Daml.Script
import DA.Date
import Platform.Types.Common 
import Platform.Role.Operator qualified as Operator (Role(..))
import Time.Clock
import Time.Lifecycle.Evolve


data Parties = Parties
  with
    alice: Party
    bob: Party
    operator: Party
    admin: Party
    timeProvider: Party
    arbitrator: Party
    arbitrator1: Party
    public : Party

data Contracts = Contracts
  with
    operatorRoleCid : ContractId Operator.Role
    clockCid : ContractId DateClock
    evolveCid : ContractId Evolve

init : Script (Parties, Contracts, House, LeaseTerms)
init = script do 

    alice <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")              
    operator <- allocatePartyWithHint "Operator" (PartyIdHint "Operator")              
    bob <- allocatePartyWithHint "Bob" (PartyIdHint "Bob")                       
    admin <- allocatePartyWithHint "Admin" (PartyIdHint "Admin")                 
    timeProvider <- allocatePartyWithHint "TimeProvider" (PartyIdHint "TimeProvider")     
    arbitrator <- allocatePartyWithHint "Arbitrator" (PartyIdHint "Arbitrator")     
    arbitrator1 <- allocatePartyWithHint "Arbitrator1" (PartyIdHint "Arbitrator1")     
    public <- allocatePartyWithHint "Public" (PartyIdHint "Public")    

    now <- getTime
    let house = House with host=alice; address = "Telheiras"; details = "This is a nice house"; listedRent=100 -- bug
        leaseTerms = LeaseTerms with agreedRent=100; beginingDate = date 2024 Jan 2; paymentDates=[date 2024 Jan 3, date 2024 Feb 1, date 2024 Mar 1]; nArbitrators = 2
        parties = Parties with alice; bob; operator; admin; timeProvider; arbitrator; arbitrator1; public
        today = toDateUTC now

    operatorRoleCid <- submit operator do
      createCmd Operator.Role with operator
    
 
    clockCid <- submit timeProvider do
      createCmd DateClock with provider = timeProvider; clockDate = today; description="Normal Clock"; observers = S.singleton public
    
    _<-submit timeProvider do createCmd DateClockUpdateEvent with provider=timeProvider; eventDate=today; observers = S.singleton public
    
    evolveCid <- submit operator do
      createCmd Evolve with operator; lifecycler=timeProvider; laKeys = S.empty


    let contracts = Contracts with operatorRoleCid; clockCid;evolveCid
    return (parties, contracts, house, leaseTerms)

