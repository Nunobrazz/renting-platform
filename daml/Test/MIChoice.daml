module Test.MIChoice where


import Test.LAcreation 
import Daml.Script
import DA.Date
import DA.Set
import Platform.Types.LA 
import Platform.Types.MI
import Platform.LeaseAgreement.Service qualified as LA (CreateMI(..))
import Platform.LeaseAgreement.ModelMI 

initialize : Script (Party, Party,Party)
initialize = do

  (parties, contracts, house, _) <- laCreation
  let 
      laKey = LAkey with tenant = parties.bob; house 
      miDetails = MIdetails with reporter=parties.bob; counterpart=parties.alice; house; startingDate = date 2024 May 19; description = "Broken chair"; nArbitrators=1


  -- Bob creates MI  Should be bob or host inviting arbitrators
  miCid <- submit parties.bob do 
    exerciseCmd contracts.laServiceCid LA.CreateMI with miDetails


  aliceId <- validateUserId "alice"
  bobId <- validateUserId "bob"
  operatorId <- validateUserId "operator"
  timeProviderId <- validateUserId "timeProvider"
  arbitrator1Id <- validateUserId "Arbitrator1" --genearl arbitrarator party too

  createUser (User aliceId (Some parties.alice)) [CanActAs parties.alice]
  createUser (User bobId (Some parties.bob)) [CanActAs parties.bob]
  createUser (User operatorId (Some parties.operator)) [CanActAs parties.operator]
  createUser (User timeProviderId (Some parties.timeProvider)) [CanActAs parties.timeProvider]
  createUser (User arbitrator1Id (Some parties.arbitrator1)) [CanActAs parties.arbitrator1]
  

  invitationCid <- submit parties.operator do 
    createCmd InviteArbitrators with operator=parties.operator; invited = fromList [ parties.arbitrator1]; confirmed = fromList [ parties.arbitrator1]; miDetails

  submit parties.operator do 
    exerciseCmd invitationCid FinalizeInvitation 



  pure (parties.timeProvider, parties.arbitrator1, parties.operator)

