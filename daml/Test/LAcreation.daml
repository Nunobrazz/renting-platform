module Test.LAcreation where

import Daml.Script
import Test.Roles qualified as Roles
import Platform.Role.Operator qualified as Operator (Role,ApproveProposalServiceRequest(..), ApproveLeaseAgreementService(..))
import Platform.Proposal.Service qualified as Proposal
import Platform.LeaseAgreement.Service qualified as LA (Service)
import Time.Clock
import Time.Lifecycle.Evolve
import Platform.Types.Common 



data Contracts = Contracts
  with
    operatorRoleCid : ContractId Operator.Role
    laServiceCid : ContractId LA.Service
    clockCid : ContractId DateClock
    evolveCid : ContractId Evolve


laCreation : Script (Roles.Parties, Contracts, House, LeaseTerms)
laCreation = script do

    (parties, oldContracts, house, leaseTerms) <- Roles.init


    let alice = parties.alice            
        operator = parties.operator      
        bob = parties.bob                
        admin = parties.admin            
        timeProvider = parties.timeProvider
        arbitrator = parties.arbitrator

        operatorRoleCid = oldContracts.operatorRoleCid
        clockCid = oldContracts.clockCid
        evolveCid = oldContracts.evolveCid
        
    -- Bob requests the access to the proposal service
    bobProposalReqCid <- submit bob do
        createCmd Proposal.Request with operator; proposer=bob, house

    -- Operator Approves bob request for the access to the proposal service
    bobProposalServiceCid <- submit operator do 
        exerciseCmd operatorRoleCid Operator.ApproveProposalServiceRequest with proposalReqCid = bobProposalReqCid

    -- Bob Creates a Proposal throught the service 
    bobProposalCid <- submit bob do
        exerciseCmd bobProposalServiceCid Proposal.CreateProposal with proposer=bob; house; leaseTerms
    
    -- Alice Accepts Bobs proposal 
    bobProposalCid <- submit alice do
        exerciseCmd bobProposalServiceCid Proposal.AcceptProposal with proposalCid=bobProposalCid
    
    -- Bob Signs the proposal 
    bobProposalCid <- submit bob do
        exerciseCmd bobProposalServiceCid Proposal.SignProposal with proposalCid=bobProposalCid; signer=bob
    
    -- Bob (or Alice) Requests the creation of the Lease Agreement  
    bobLAreqCid <- submit bob do
        exerciseCmd bobProposalServiceCid Proposal.RequestLeaseAgreement with signer=bob; proposalCid=bobProposalCid
    
    -- Operator Approves bob request for the Lease Agreemnet
    laServiceCid <- submit operator do
        exerciseCmd operatorRoleCid Operator.ApproveLeaseAgreementService with laServiceReqCid=bobLAreqCid; lifecycler=timeProvider; arbitrator


    let contracts = Contracts with operatorRoleCid; laServiceCid; clockCid; evolveCid

    return (parties, contracts, house, leaseTerms)