module Test.Main where

import qualified DA.Set as S
import DA.Date
import DA.Foldable (forA_)

import Test.LAcreation 
import Daml.Script
import Platform.Types.LA 
import Platform.ModelMI
import Platform.ModelLA
import Test.Roles

import Platform.Types.Common

createLAReplics : Int -> Parties -> House -> LeaseTerms -> Script ()
createLAReplics number parties house leaseTerms =  do
  forA_ (enumFromTo 2 number) (\id ->
    do
      laCreation parties house leaseTerms id
    )

createLAReplics50 : Int -> Parties -> House -> LeaseTerms -> Date -> Script ()
createLAReplics50 number parties house leaseTerms yesterday =  do
  forA_ (enumFromTo 2 (number)) (\id ->
    do
      if (id%2==0) then do
        let newLeaseTerms = LeaseTerms with agreedRent=leaseTerms.agreedRent; beginingDate=leaseTerms.beginingDate; paymentDates=yesterday::leaseTerms.paymentDates; nArbitrators=leaseTerms.nArbitrators
        laCreation parties house newLeaseTerms id
      else 
        laCreation parties house leaseTerms id
    )


createLAReplics100 : Int -> Parties -> House -> LeaseTerms -> Date -> Script ()
createLAReplics100 number parties house leaseTerms yesterday =  do
  forA_ (enumFromTo 2 (number)) (\id ->
    do
      let newLeaseTerms = LeaseTerms with agreedRent=leaseTerms.agreedRent; beginingDate=leaseTerms.beginingDate; paymentDates=yesterday::leaseTerms.paymentDates; nArbitrators=leaseTerms.nArbitrators
      laCreation parties house newLeaseTerms id      
    )


initialize : Script Parties
initialize = do

  --passTime (days 19894)

  (parties, house, leaseTerms, today) <- init


  laCid <- laCreation parties house leaseTerms 1
  --createLAReplics 1 parties house leaseTerms
  --createLAReplics50 1000 parties house leaseTerms (subtractDays today 1)
  --createLAReplics100 1000 parties house leaseTerms (subtractDays today 1)

  let 
      laKey = LAkey with tenant = parties.bob; house; id=1

  availableArbitratorsCid <- submit parties.operator do
    createCmd AvailableArbitrators with operator=parties.operator; arbitrators= S.fromList [parties.arbitrator1, parties.arbitrator2, parties.arbitrator3]; observers = S.fromList [parties.public]
  
  -- Bob creates MI 
  miReportCid <- submit parties.bob do 
    exerciseCmd laCid CreateMI with reporter = parties.bob; house; startingDate = today; description = "Broken chair"

  aaReqCid <- submit parties.bob do 
    createCmd AvailableArbitratorsRequest with requester=parties.bob; public = parties.public

  aaCid <- submit parties.public do 
    exerciseCmd availableArbitratorsCid AddObserver with requestCid = aaReqCid; public=parties.public


  {--eventCid <- query @DateClockUpdateEvent parties.timeProvider1
  let (dateClockUpdateEventCid, _) = L.head eventCid
  
  evolve <- query @Evolve parties.lifecycler
  let (evolveCid, _) = L.head evolve
  
  newLACid <- submit parties.lifecycler do
    exerciseCmd evolveCid ProcessEvent with eventCid=dateClockUpdateEventCid--}


  aliceId <- validateUserId "alice"
  bobId <- validateUserId "bob"
  operatorId <- validateUserId "operator"
  timeProvider1Id <- validateUserId "timeProvider1"
  timeProvider2Id <- validateUserId "timeProvider2"
  lifecyclerId <- validateUserId "lifecycler"

  arbitrator1Id <- validateUserId "arbitrator1" 
  arbitrator2Id <- validateUserId "arbitrator2"
  arbitrator3Id <- validateUserId "arbitrator3"

  createUser (User aliceId (Some parties.alice)) [CanActAs parties.alice]
  createUser (User bobId (Some parties.bob)) [CanActAs parties.bob]
  createUser (User operatorId (Some parties.operator)) [CanActAs parties.operator]

  createUser (User timeProvider1Id (Some parties.timeProvider1)) [CanActAs parties.timeProvider1, CanActAs parties.lifecycler]
  createUser (User timeProvider2Id (Some parties.timeProvider2)) [CanActAs parties.timeProvider2, CanActAs parties.lifecycler]
  
  createUser (User lifecyclerId (Some parties.lifecycler)) [CanActAs parties.lifecycler]

  createUser (User arbitrator1Id (Some parties.arbitrator1)) [CanActAs parties.arbitrator1]
  createUser (User arbitrator2Id (Some parties.arbitrator2)) [CanActAs parties.arbitrator2]
  
  

  pure parties
  --pure [ parties.timeProvider1, parties.timeProvider2, parties.arbitrator1, parties.arbitrator2, parties.lifecycler]


